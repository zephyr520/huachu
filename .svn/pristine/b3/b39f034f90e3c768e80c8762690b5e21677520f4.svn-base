package com.huachu.core.service;

import com.github.pagehelper.Page;
import com.google.common.util.concurrent.ThreadFactoryBuilder;
import com.huachu.common.constants.Constant;
import com.huachu.common.dto.AuthUserDTO;
import com.huachu.common.dto.RecyclingListDTO;
import com.huachu.common.excel.ParserExcel;
import com.huachu.common.exception.BOException;
import com.huachu.common.service.RedisIdService;
import com.huachu.common.service.RedisService;
import com.huachu.common.util.BeanUtil;
import com.huachu.common.util.StringUtils;
import com.huachu.common.web.ApiResultCode;
import com.huachu.core.dao.TRecyclingAccessoryMapper;
import com.huachu.core.dao.TRecyclingListMapper;
import com.huachu.core.dao.TRepairShopMapper;
import com.huachu.core.manager.RecyclingListManager;
import com.huachu.core.queue.RecyclingListTask;
import com.huachu.domain.TRecyclingAccessory;
import com.huachu.domain.TRecyclingDispatch;
import com.huachu.domain.TRecyclingList;
import com.huachu.domain.TRepairShop;
import com.huachu.dto.request.RecyclingListDispatchReqDTO;
import com.huachu.dto.request.query.QueryRecyclingListReqDTO;
import com.huachu.dto.response.RecyclingListRespDTO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.*;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

@Service
public class RecyclingListService {

	private static final Logger logger = LoggerFactory.getLogger(RecyclingListService.class);
	@Autowired
	TRecyclingListMapper recyclingListMapper;
	@Autowired
	RecyclingListManager recyclingListManager;
	@Autowired
	TRecyclingAccessoryMapper recyclingAccessoryMapper;
	@Autowired
	RedisIdService redisIdService;
	@Autowired
	TRepairShopMapper repairShopMapper;
	@Autowired
	RedisService redisService;

	private Lock lock = new ReentrantLock();
	
	public Page<RecyclingListRespDTO> queryList(QueryRecyclingListReqDTO reqDto, AuthUserDTO authUser) {
		if (!authUser.getRoleNos().contains(Constant.ROLE_ADMIN)) {
			reqDto.setRecyclingUserId(authUser.getUserId());
		}
		return recyclingListMapper.queryList(reqDto);
	}
	
	public Boolean dispatchRecyclingList(RecyclingListDispatchReqDTO reqDto, AuthUserDTO authUser) {
		List<TRecyclingList> recyclingList = recyclingListMapper.selectByPrimaryKeyList(reqDto.getRecyclingNoList());
		if (!recyclingList.isEmpty() && recyclingList.size() != reqDto.getRecyclingNoList().size()) {
			throw new BOException(ApiResultCode.PARAM_ERROR, "对已全部回收完成的回收单，不能重复派单");
		}
		List<TRecyclingDispatch> dispatchRecyclingList = new ArrayList<>();
		TRecyclingDispatch record = null;
		Date dispatchTime = new Date();
		for (String recyclingNo : reqDto.getRecyclingNoList()) {
			List<TRecyclingAccessory> accessoryList = recyclingAccessoryMapper.queryAccessoryListByRecyclingNo(recyclingNo);
			if (accessoryList == null || accessoryList.isEmpty()) {
				throw new BOException(ApiResultCode.PARAM_ERROR, "此回收单(单号：" + recyclingNo + ")无配件，无需派单");
			}
			record = BeanUtil.copy(reqDto, TRecyclingDispatch.class);
			record.setRecyclingNo(recyclingNo);
			record.setDispatchUserId(authUser.getUserId());
			record.setDispatchTime(dispatchTime);
			
			dispatchRecyclingList.add(record);
		}
		try {
			return recyclingListManager.dispatchRecyclingList(dispatchRecyclingList);
		} catch (Exception e) {
			e.printStackTrace();
			throw new BOException(ApiResultCode.SERVICE_ERROR, "派单失败");
		}
	}

	public void recyclingListImport(String fileName, MultipartFile file) {
		ParserExcel excel = null;
		ExecutorService executorService = null;
		CountDownLatch countDownLatch = null;
		long start = System.currentTimeMillis();
		try {
			excel = new ParserExcel();
			excel.open(fileName, file.getInputStream());
			// 读取第一个Sheet表
			excel.setSheetNum(0);
			// 获取表的总行数
			int rowCount = excel.getRowCount() + 1;
			int len = rowCount / RecyclingListTask.CORE_POOL_SIZE;
			int size = rowCount % RecyclingListTask.CORE_POOL_SIZE == 0 ? len : len + 1 ;
			logger.info("excel的行数：{}，每个线程处理的数量：{}", rowCount, size);
			countDownLatch = new CountDownLatch(RecyclingListTask.CORE_POOL_SIZE);
			executorService = new ThreadPoolExecutor(
					RecyclingListTask.CORE_POOL_SIZE, 10, 60,
					TimeUnit.SECONDS,
					new LinkedBlockingQueue<>(RecyclingListTask.QUEUE_MAX_SIZE),
					new ThreadFactoryBuilder().setNameFormat("recyclingList-queue-%d").build());
			for (int i = 0; i < RecyclingListTask.CORE_POOL_SIZE; i++) {
					if (i  == RecyclingListTask.CORE_POOL_SIZE - 1) {
						executorService.submit(new RecyclingListTask(countDownLatch, this, excel, i * size, rowCount));
					} else {
					int startSize = 0;
					int endSize = size * (i + 1);
					if (i == 0) {
						startSize = i * size + 1;
					} else {
						startSize = i * size;
					}
					executorService.submit(new RecyclingListTask(countDownLatch, this, excel, startSize, endSize));
				}
			}
			countDownLatch.await();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			executorService.shutdown();
		}
		long end = System.currentTimeMillis();
		logger.info("导入数据总耗时：{}毫秒", (end - start));
	}

	public void createRecyclingList(RecyclingListDTO recyclingListDTO) {
		lock.lock();
		TRecyclingList recyclingList = null;
		TRecyclingAccessory recyclingAccessory = null;

		TRecyclingList oldRecord = recyclingListMapper.selectByUniqueKey(recyclingListDTO.getFileNo(), recyclingListDTO.getPlateNo());
		if (oldRecord != null) {
			recyclingAccessory = BeanUtil.copy(recyclingListDTO, TRecyclingAccessory.class);
			recyclingAccessory.setRecyclingNo(oldRecord.getRecyclingNo());
		} else {
			TRepairShop repairShop = repairShopMapper.queryByUniqueKey(recyclingListDTO.getRepairShopName());
			if (repairShop == null) {
				repairShop = new TRepairShop();
				if (StringUtils.isNotBlank(recyclingListDTO.getRepairShopName())) {
					repairShop.setRepairShopName(recyclingListDTO.getRepairShopName());
					repairShopMapper.insertSelective(repairShop);
				}
			}
			String recyclingNo = redisIdService.genRecyclingNo();
			recyclingList = BeanUtil.copy(recyclingListDTO, TRecyclingList.class);
			recyclingList.setRepairShopId(repairShop.getId() == null ? 0 : repairShop.getId());
			recyclingList.setRecyclingNo(recyclingNo);

			recyclingAccessory = BeanUtil.copy(recyclingListDTO, TRecyclingAccessory.class);
			recyclingAccessory.setRecyclingNo(recyclingNo);
		}


		try {
			recyclingListManager.createRecyclingList(recyclingList, recyclingAccessory);
		} catch (Exception e) {
			e.printStackTrace();
			if (logger.isErrorEnabled()) {
				logger.error("回收单创建失败：{}", e.getMessage());
			}
		} finally {
			lock.unlock();
		}
	}
}