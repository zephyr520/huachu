package com.huachu.core.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.huachu.common.constants.RedisConst;
import com.huachu.common.dto.AuthUserDTO;
import com.huachu.common.exception.BOException;
import com.huachu.common.service.RedisService;
import com.huachu.common.util.BeanUtil;
import com.huachu.common.util.StringUtils;
import com.huachu.common.web.ApiResultCode;
import com.huachu.core.dao.TAdminRoleMapper;
import com.huachu.core.dao.TAdminUserMapper;
import com.huachu.domain.TAdminRole;
import com.huachu.domain.TAdminUser;
import com.huachu.dto.request.LoginReqDTO;
import com.huachu.dto.response.LoginRespDTO;

/**
 *@author zephyr
 *@date 2018-10-28
 */
@Service
public class LoginService {

    @Autowired
    TAdminUserMapper adminUserMapper;
    @Autowired
    RedisService redisService;
    @Autowired
    TAdminRoleMapper adminRoleMapper;

    public LoginRespDTO login(LoginReqDTO reqDTO) {
        TAdminUser tUser = adminUserMapper.selectByUsername(reqDTO.getUsername());
        if (tUser == null) {
            throw new BOException(ApiResultCode.NO_DATA, "用户不存在");
        }
        if (!tUser.getPassWord().equals(reqDTO.getPassword())) {
            throw new BOException(ApiResultCode.PWD_ERROR);
        }
        List<TAdminRole> roleList = adminRoleMapper.selectByUserId(tUser.getUserId());
        if (roleList == null || roleList.isEmpty()) {
        	throw new BOException(ApiResultCode.CUSTOMIZE_ERROR, "未给用户分配对应的角色");
        }
        AuthUserDTO authUser = BeanUtil.copy(tUser, AuthUserDTO.class);
        authUser.setRoleNos(roleList.stream().map(TAdminRole::getRoleNo).collect(Collectors.toList()));
        redisService.set(RedisConst.LOGIN_USER_INFO+authUser.getUserId(), authUser);
        //TODO 获取用户授权菜单，接口访问权限缓存
        LoginRespDTO respDTO = new LoginRespDTO();
        respDTO.setUsername(authUser.getUserName());
        respDTO.setNickname(authUser.getRealName());
        respDTO.setAccessToken("");
        return respDTO;
    }
}
