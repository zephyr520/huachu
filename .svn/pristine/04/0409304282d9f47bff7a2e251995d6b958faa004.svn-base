package com.huachu.core.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.Page;
import com.huachu.common.constants.Constant;
import com.huachu.common.dto.AuthUserDTO;
import com.huachu.common.exception.BOException;
import com.huachu.common.util.BeanUtil;
import com.huachu.common.web.ApiResultCode;
import com.huachu.core.dao.TRecyclingListMapper;
import com.huachu.core.manager.RecyclingListManager;
import com.huachu.domain.TRecyclingDispatch;
import com.huachu.domain.TRecyclingList;
import com.huachu.dto.request.RecyclingListDispatchReqDTO;
import com.huachu.dto.request.query.QueryRecyclingListReqDTO;
import com.huachu.dto.response.RecyclingListRespDTO;

@Service
public class RecyclingListService {

	@Autowired
	TRecyclingListMapper recyclingListMapper;
	@Autowired
	RecyclingListManager recyclingListManager;
	
	public Page<RecyclingListRespDTO> queryList(QueryRecyclingListReqDTO reqDto, AuthUserDTO authUser) {
		if (!authUser.getRoleNos().contains(Constant.ROLE_ADMIN)) {
			reqDto.setRecyclingUserId(authUser.getUserId());
		}
		return recyclingListMapper.queryList(reqDto);
	}
	
	public Boolean dispatchRecyclingList(RecyclingListDispatchReqDTO reqDto, AuthUserDTO authUser) {
		List<TRecyclingList> recyclingList = recyclingListMapper.selectByPrimaryKeyList(reqDto.getRecyclingNoList());
		if (!recyclingList.isEmpty() && recyclingList.size() != reqDto.getRecyclingNoList().size()) {
			throw new BOException(ApiResultCode.PARAM_ERROR, "对已全部回收完成的回收单，不能重复派单");
		}
		List<TRecyclingDispatch> dispatchRecyclingList = new ArrayList<>();
		TRecyclingDispatch record = null;
		Date dispatchTime = new Date();
		for (String recyclingNo : reqDto.getRecyclingNoList()) {
			record = BeanUtil.copy(reqDto, TRecyclingDispatch.class);
			record.setRecyclingNo(recyclingNo);
			record.setDispatchUserId(authUser.getUserId());
			record.setDispatchTime(dispatchTime);
			
			dispatchRecyclingList.add(record);
		}
		try {
			return recyclingListManager.dispatchRecyclingList(dispatchRecyclingList);
		} catch (Exception e) {
			e.printStackTrace();
			throw new BOException(ApiResultCode.SERVICE_ERROR, "派单失败");
		}
	}
}
