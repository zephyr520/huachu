package com.huachu.api.filter;

import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.huachu.common.constants.Constant;
import com.huachu.common.constants.RedisConst;
import com.huachu.common.dto.AuthUserDTO;
import com.huachu.common.exception.BOException;
import com.huachu.common.holder.HttpRequestHolder;
import com.huachu.common.service.RedisService;
import com.huachu.common.util.CookieUtil;
import com.huachu.common.util.DateUtils;
import com.huachu.common.web.ApiResultCode;

/**
 * @author Administrator
 * @DATE 2018/8/17
 * 校验是否登录拦截器
 */
public class AuthInterceptor extends HandlerInterceptorAdapter {

    private static final Logger logger = LoggerFactory.getLogger(AuthInterceptor.class);

    private final static String XAUTH_TOKEN_HEADER_NAME = "x-auth-token";

    private final static String XAUTH_TOKEN_PARAMETER_NAME = "auth_token";
    @Autowired
    private RedisService redisService;

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        String authTokenCookie;
        authTokenCookie = CookieUtil.getCookieValue(Constant.ACCESS_TOKEN, request);
        String authTokenHeader = request.getHeader(XAUTH_TOKEN_HEADER_NAME);
        String authTokenParameter = request.getParameter(XAUTH_TOKEN_PARAMETER_NAME);
        String authToken = null==authTokenParameter?null==authTokenHeader?authTokenCookie:authTokenHeader:authTokenParameter;
        if(authToken == null) {
            throw new BOException(ApiResultCode.NO_LOGIN);
        }
//        Claims claims = jwtService.validJwt(authToken);
//        Date expireDate = claims.getExpiration();
//        long expire = expireDate.getTime();
//        logger.info("到期时间：{}", DateUtils.ParseToString(expireDate));
//        if((expire - System.currentTimeMillis()) <= 0) {
//            throw new BOException(ApiResultCode.NO_LOGIN);
//        }
//        String userId = claims.getSubject();
//        AuthUserDTO authUser = redisService.get(RedisConst.LOGIN_USER_INFO+userId, AuthUserDTO.class);
//        HttpRequestHolder.setContext(Constant.USER_CONTEXT, authUser);
        return super.preHandle(request, response, handler);
    }
}
